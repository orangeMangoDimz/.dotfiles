{
	"C++ Competitive Programming Template": {
		"prefix": "cp-sk",
		"body": [
			"// Title          : Your Title",
			"// Link           : Your link",
			"// Key problem    : Your description",
			"",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"// Macros",
			"",
			"// Multiple test case define",
			"#define wez(z) int z; std::cin >> z;",
			"#define TESTS wez(testow); while(testow--)",
			"",
			"// Pairs",
			"#define fi first",
			"#define Se second",
			"#define mp make_pair",
			"",
			"// vectors",
			"typedef vector<int> vi;",
			"typedef map<int, int> mi;",
			"typedef vector<vi> vvi;",
			"#define PB push_back",
			"#define ALL(c) (c).begin(),(c).end()",
			"#define PRESENT(c,x) ((c).find(x) != (c).end())",
			"",
			"// Debug",
			"template<typename T>",
			"std::ostream& operator<<(std::ostream& os, const std::vector<T>& v) {",
			"\tos << \"[\";",
			"\tfor (size_t i = 0; i < v.size(); ++i) {",
			"\t\tos << v[i];",
			"\t\tif (i != v.size() - 1) {",
			"\t\t\tos << \", \";",
			"\t\t}",
			"\t}",
			"\tos << \"]\";",
			"return os;",
			"}",
			"",
			"// Debug macro for map",
			"template<typename T, typename U>",
			"std::ostream& operator<<(std::ostream& os, const std::map<T, U>& m) {",
			"\tos << \"{\";",
			"\tbool first = true;",
			"\tfor (const auto& p : m) {",
			"\t\tif (!first) {",
			"\t\t\tos << \", \";",
			"\t\t}",
			"\t\tos << p.first << \": \" << p.second;",
			"\t\tfirst = false;",
			"\t}",
			"\tos << \"}\";",
			"\treturn os;",
			"}",
			"",
			"#define debug(x) std::cerr << #x << \" at \" << __FILE__ << \":\" << __LINE__ << \" = \" << x << std::endl",
			"",
			"#define REP(i,a,b) for (int i = a; i <= b; i++)",
			"#define lli long long int",
			"#define ulli unsigned long long int",
			"",
			"void solve() {",
			"\t// Write your solution here",
			"}",
			"",
			"int main() {",
			"\tios_base::sync_with_stdio(false);",
			"\tcin.tie(NULL);",
			"\t",
			"\t$0",
			"\t",
			"\treturn 0;",
			"}"
		],
		"description": "A C++ template for competitive programming with common macros and boilerplate."
	}
}
